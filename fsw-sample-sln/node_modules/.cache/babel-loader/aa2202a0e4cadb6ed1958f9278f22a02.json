{"ast":null,"code":"import _classCallCheck from \"/Users/elissathomas/Documents/GitHub/Game-of-Life/fsw-sample-sln/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/elissathomas/Documents/GitHub/Game-of-Life/fsw-sample-sln/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/elissathomas/Documents/GitHub/Game-of-Life/fsw-sample-sln/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/elissathomas/Documents/GitHub/Game-of-Life/fsw-sample-sln/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/elissathomas/Documents/GitHub/Game-of-Life/fsw-sample-sln/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/elissathomas/Documents/GitHub/Game-of-Life/fsw-sample-sln/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  return React.createElement(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    style: {\n      backgroundColor: props.bgColor\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  });\n}\n\nvar Rules =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Rules, _React$Component);\n\n  function Rules() {\n    _classCallCheck(this, Rules);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Rules).apply(this, arguments));\n  }\n\n  _createClass(Rules, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }), React.createElement(\"h3\", {\n        className: \"rule-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, \" Rules \"), React.createElement(\"ul\", {\n        className: \"rule-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, \"If a cell is \", React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, \"alive\"), \" and it has exactly 2 or 3 live neighbors, it \", React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, \"stays alive\"), \".\"), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, \"If a cell is \", React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, \"alive\"), \" and it has less than 2 or 4+ live neighbors, it \", React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, \"dies\"), \".\"), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, \"If a cell is \", React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, \"dead\"), \" and it has exactly 3 live neighbors, it \", React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, \"comes to life\"), \".\")));\n    }\n  }]);\n\n  return Rules;\n}(React.Component);\n\nvar Board =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(Board, _React$Component2);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n\n    _this.playSim = function () {\n      _this.setState({\n        simulationRunning: true\n      });\n\n      _this.buildNextGen();\n    };\n\n    _this.stopSim = function () {\n      _this.setState({\n        simulationRunning: false\n      });\n\n      if (_this.timeoutHandler) {\n        window.clearTimeout(_this.timeoutHandler);\n        _this.timeoutHandler = null;\n      }\n    };\n\n    _this.changeGridSize = function (event) {\n      _this.setState({\n        size: event.target.value\n      });\n\n      var cells = event.target.value * event.target.value;\n      console.log(cells);\n\n      _this.setState({\n        squares: Array(cells).fill('white')\n      });\n    };\n\n    _this.changeSimSpeed = function (event) {\n      _this.setState({\n        interval: event.target.value\n      });\n    };\n\n    _this.state = {\n      size: 10,\n      squares: Array(100).fill('white'),\n      simulationRunning: false,\n      generation: 0,\n      interval: 1000\n    };\n    return _this;\n  }\n\n  _createClass(Board, [{\n    key: \"buildNextGen\",\n    value: function buildNextGen() {\n      var _this2 = this;\n\n      var newSquares = this.state.squares.slice();\n\n      for (var i = 0; i < newSquares.length; i++) {\n        var liveNeighbors = 0;\n        var curStatus = this.state.squares[i];\n        console.log(this.state.squares); // check 8 neighbors in squares, count black (alive)\n\n        if (this.state.squares[i - this.state.size - 1] === \"black\") {\n          liveNeighbors++;\n        } // top left\n\n\n        if (this.state.squares[i - this.state.size] === \"black\") {\n          liveNeighbors++;\n        } // top\n\n\n        if (this.state.squares[i - this.state.size + 1] === \"black\") {\n          liveNeighbors++;\n        } // top right\n\n\n        if (this.state.squares[i - 1] === \"black\") {\n          liveNeighbors++;\n        } // left\n\n\n        if (this.state.squares[i + 1] === \"black\") {\n          liveNeighbors++;\n        } // right\n\n\n        if (this.state.squares[i + this.state.size - 1] === \"black\") {\n          liveNeighbors++;\n        } // bottom left\n\n\n        if (this.state.squares[i + this.state.size] === \"black\") {\n          liveNeighbors++;\n        } // bottom\n\n\n        if (this.state.squares[i + this.state.size + 1] === \"black\") {\n          liveNeighbors++;\n        } // bottom right\n\n\n        if (curStatus === \"black\") // is alive, will neighbors kill it?\n          {\n            if (liveNeighbors === 2 || liveNeighbors === 3) {\n              newSquares[i] = 'black'; // staying alive!\n            } else {\n              newSquares[i] = 'white'; // death by overcrowding or underpopulation\n            }\n          } else // is dead, is situation right for birth?\n          {\n            if (liveNeighbors === 3) {\n              newSquares[i] = 'black'; // yes\n            } else {\n              newSquares[i] = 'white'; // no\n            }\n          }\n      } // set Board's squares to newSquares\n\n\n      this.setState({\n        squares: newSquares,\n        generation: this.state.generation + 1\n      }); // wait [interval] seconds\n\n      this.timeoutHandler = window.setTimeout(function () {\n        _this2.buildNextGen();\n      }, this.state.interval);\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(i) {\n      var squares = this.state.squares.slice();\n\n      if (this.state.simulationRunning) {\n        return;\n      }\n\n      if (squares[i] === 'white') {\n        squares[i] = 'black';\n      } else {\n        squares[i] = 'white';\n      }\n\n      this.setState({\n        squares: squares\n      });\n    }\n  }, {\n    key: \"renderSquare\",\n    value: function renderSquare(i) {\n      var _this3 = this;\n\n      return React.createElement(Square, {\n        bgColor: this.state.squares[i],\n        onClick: function onClick() {\n          return _this3.handleClick(i);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"createRows\",\n    value: function createRows(num, numRows) {\n      var _this4 = this;\n\n      var numbers = [this.state.size];\n\n      for (var i = 0; i < this.state.size; i++) {\n        numbers[i] = i;\n      }\n\n      var aRow = numbers.map(function (n) {\n        return _this4.renderSquare(n + num * numRows);\n      }); //{this.renderSquare(n + numRows*num)} );\n\n      return React.createElement(\"div\", {\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, aRow);\n    }\n  }, {\n    key: \"createGrid\",\n    value: function createGrid(num) {\n      var _this5 = this;\n\n      var numbers = [this.state.size];\n\n      for (var i = 0; i < this.state.size; i++) {\n        numbers[i] = i;\n      }\n\n      var allRows = numbers.map(function (n) {\n        return _this5.createRows(n, num);\n      }); //{this.createRows(n, this.state.size )} );\n\n      return allRows;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var status;\n      status = 'Generation: ' + this.state.generation;\n      return React.createElement(\"div\", {\n        className: \"top\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, \" Conway's Game of life\"), React.createElement(\"div\", {\n        className: \"status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, status), React.createElement(\"div\", {\n        className: \"board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, this.createGrid(this.state.size)), React.createElement(\"div\", {\n        className: \"controls\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, \"Update every \", React.createElement(\"input\", {\n        defaultValue: this.state.interval,\n        size: \"8\",\n        onChange: this.changeSimSpeed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }), \" ms\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }), \"Size  of  grid   \", React.createElement(\"input\", {\n        defaultValue: this.state.size,\n        size: \"8\",\n        onChange: this.changeGridSize,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }), this.state.simulationRunning ? React.createElement(\"button\", {\n        className: \"button\",\n        onClick: this.stopSim,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, \"\\u25A0 Stop\") : React.createElement(\"button\", {\n        className: \"button\",\n        onClick: this.playSim,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, \"\\u25B6 Play\")));\n    }\n  }]);\n\n  return Board;\n}(React.Component);\n\nvar Simulation =\n/*#__PURE__*/\nfunction (_React$Component3) {\n  _inherits(Simulation, _React$Component3);\n\n  function Simulation() {\n    _classCallCheck(this, Simulation);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Simulation).apply(this, arguments));\n  }\n\n  _createClass(Simulation, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"sim\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"sim-main\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, React.createElement(Board, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }), \" \", React.createElement(Rules, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"sim-about\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, \"About this Algorithm...\")), React.createElement(\"div\", {\n        className: \"sim-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }), React.createElement(\"ol\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Simulation;\n}(React.Component); // ========================================\n\n\nReactDOM.render(React.createElement(Simulation, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 235\n  },\n  __self: this\n}), document.getElementById('root')); // 3d life...three.js for visualizing\n// hashlife\n// color fading based on time of death","map":{"version":3,"sources":["/Users/elissathomas/Documents/GitHub/Game-of-Life/fsw-sample-sln/src/index.js"],"names":["React","ReactDOM","Square","props","onClick","backgroundColor","bgColor","Rules","Component","Board","playSim","setState","simulationRunning","buildNextGen","stopSim","timeoutHandler","window","clearTimeout","changeGridSize","event","size","target","value","cells","console","log","squares","Array","fill","changeSimSpeed","interval","state","generation","newSquares","slice","i","length","liveNeighbors","curStatus","setTimeout","handleClick","num","numRows","numbers","aRow","map","n","renderSquare","allRows","createRows","status","createGrid","Simulation","render","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n  function Square(props) {\n    return (\n      <button className=\"square\" onClick={props.onClick} style={{backgroundColor:props.bgColor}} >        \n      </button>\n    );\n  }\n\n  class Rules extends React.Component {\n    render() {\n        return (\n            <div>\n            <br/><br/><br/>\n            <h3 className=\"rule-header\"> Rules </h3>\n            <ul className=\"rule-list\">\n                <li>\n                    If a cell is <b>alive</b> and it has exactly 2 or 3 live neighbors, it <b>stays alive</b>.\n                </li>\n                <li>\n                    If a cell is <b>alive</b> and it has less than 2 or 4+ live neighbors, it <b>dies</b>.\n                </li>\n                <li>\n                    If a cell is <b>dead</b> and it has exactly 3 live neighbors, it <b>comes to life</b>.\n                </li>\n            </ul>\n            </div>\n        );\n    }\n  }\n\n  class Board extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        size: 10,\n        squares: Array(100).fill('white'),\n        simulationRunning: false,\n        generation: 0,\n        interval: 1000,\n      };\n    }\n\n    buildNextGen() {\n        var newSquares = this.state.squares.slice();\n\n        for(var i=0; i<newSquares.length; i++ ) {\n            var liveNeighbors = 0;\n            var curStatus = this.state.squares[i];\n\n            console.log( this.state.squares );\n            // check 8 neighbors in squares, count black (alive)\n            if( this.state.squares[i-this.state.size-1] === \"black\") { liveNeighbors++; } // top left\n            if( this.state.squares[i-this.state.size] === \"black\") { liveNeighbors++; }   // top\n            if( this.state.squares[i-this.state.size+1] === \"black\") { liveNeighbors++; } // top right\n            if( this.state.squares[i-1] === \"black\") { liveNeighbors++; } // left\n            if( this.state.squares[i+1] === \"black\") { liveNeighbors++; } // right\n            if( this.state.squares[i+this.state.size-1] === \"black\") { liveNeighbors++; } // bottom left\n            if( this.state.squares[i+this.state.size] === \"black\") { liveNeighbors++; } // bottom\n            if( this.state.squares[i+this.state.size+1] === \"black\") { liveNeighbors++; } // bottom right\n            \n            if( curStatus === \"black\" ) // is alive, will neighbors kill it?\n            {\n                \n                if( liveNeighbors === 2 || liveNeighbors === 3 )\n                {\n                    newSquares[i] = 'black'; // staying alive!\n                }\n                else\n                {\n                    newSquares[i] = 'white'; // death by overcrowding or underpopulation\n                }\n            }\n            else  // is dead, is situation right for birth?\n            {\n                \n                if( liveNeighbors === 3 )\n                {\n                    newSquares[i] = 'black'; // yes\n                }\n                else\n                {\n                    newSquares[i] = 'white'; // no\n                }\n            }\n            \n        }\n        // set Board's squares to newSquares\n        this.setState({\n            squares: newSquares,\n            generation: this.state.generation + 1,\n          });\n\n        // wait [interval] seconds\n        this.timeoutHandler = window.setTimeout(() => {\n            this.buildNextGen();\n          }, this.state.interval);\n    }\n  \n    handleClick(i) {\n      const squares = this.state.squares.slice();\n      if (this.state.simulationRunning) {\n        return;\n      }\n      if( squares[i] === 'white') {\n          squares[i] = 'black';\n      }\n      else {\n          squares[i] = 'white';\n      }\n      this.setState({\n        squares: squares,\n      });\n    }\n\n    playSim = () => {\n        this.setState({ simulationRunning: true });\n        this.buildNextGen();\n    }\n\n    stopSim = () => {\n        this.setState({ simulationRunning: false });\n        if (this.timeoutHandler) {\n            window.clearTimeout(this.timeoutHandler);\n            this.timeoutHandler = null;\n          }\n    }\n\n    changeGridSize = (event) => {\n        this.setState({ size: event.target.value });\n        const cells = event.target.value * event.target.value;\n        console.log( cells );\n        this.setState({ squares: Array(cells).fill('white')})\n      }\n      \n    changeSimSpeed = (event) => {\n        this.setState({ interval: event.target.value });\n      }\n  \n    renderSquare(i) {\n      return (\n        <Square\n          bgColor={this.state.squares[i]}\n          onClick={() => this.handleClick(i)}\n        />\n       );\n    }\n  \n    createRows( num, numRows ) {\n        var numbers = [this.state.size];\n        for(var i=0; i<this.state.size; i++) {\n            numbers[i] = i;\n        }\n        const aRow = numbers.map((n) => this.renderSquare(n + num*numRows));//{this.renderSquare(n + numRows*num)} );\n\n        return (\n            <div className=\"board-row\">\n                {aRow}\n            </div>\n        );\n    }\n\n    createGrid( num ){\n        var numbers = [this.state.size];\n        for(var i=0; i<this.state.size; i++) {\n            numbers[i] = i;\n        }\n        const allRows = numbers.map((n) => this.createRows(n, num));//{this.createRows(n, this.state.size )} );\n        return allRows;\n    }\n\n    render() {\n      let status;\n      \n      status = 'Generation: ' + this.state.generation;\n       \n      return (\n          <div className=\"top\">\n            <h2> Conway's Game of life</h2>\n                <div className=\"status\">{status}</div>\n                \n                <div className=\"board\">\n                    {this.createGrid( this.state.size )}\n                </div>\n                \n                <div className=\"controls\">\n                    Update every <input defaultValue={this.state.interval} size=\"8\"\n                        onChange={this.changeSimSpeed} /> ms\n                    <br />\n\n                    Size  of  grid   <input defaultValue={this.state.size} size=\"8\"\n                        onChange={this.changeGridSize} /> \n                    <br />\n\n                    {this.state.simulationRunning ?\n                        <button className=\"button\"\n                            onClick={this.stopSim}>■ Stop</button> :\n                        <button className=\"button\"\n                            onClick={this.playSim}>▶ Play</button>\n                    }\n                </div>\n\n            </div>\n      );\n    }\n  }\n  \n  class Simulation extends React.Component {\n    render() {\n      return (\n        <div className=\"sim\">\n          <div className=\"sim-main\">\n            <Board /> <Rules />\n            \n          </div>\n          <div className=\"sim-about\">\n            <br /><br /><br />\n                <h3>About this Algorithm...</h3>\n            </div>\n          <div className=\"sim-info\">\n            <div>{/* status */}</div>\n            <ol>{/* TODO */}</ol>\n          </div>\n        </div>\n      );\n    }\n  }\n  \n  // ========================================\n  \n  ReactDOM.render(\n    <Simulation />,\n    document.getElementById('root')\n  );\n\n  // 3d life...three.js for visualizing\n  // hashlife\n  // color fading based on time of death\n"]},"metadata":{},"sourceType":"module"}