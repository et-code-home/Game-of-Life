{"ast":null,"code":"import _classCallCheck from \"/Users/elissathomas/Documents/GitHub/Conways-Life/fsw-sample-sln/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/elissathomas/Documents/GitHub/Conways-Life/fsw-sample-sln/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/elissathomas/Documents/GitHub/Conways-Life/fsw-sample-sln/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/elissathomas/Documents/GitHub/Conways-Life/fsw-sample-sln/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/elissathomas/Documents/GitHub/Conways-Life/fsw-sample-sln/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/elissathomas/Documents/GitHub/Conways-Life/fsw-sample-sln/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  return React.createElement(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    style: {\n      backgroundColor: props.bgColor\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  });\n} //   function Play(props) {\n//     return (\n//       <button className=\"play\" onClick={props.runSimulation}>\n//         {props.value}\n//       </button>\n//     );\n//   }\n\n\nvar StopButton =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StopButton, _React$Component);\n\n  function StopButton() {\n    _classCallCheck(this, StopButton);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StopButton).apply(this, arguments));\n  }\n\n  _createClass(StopButton, [{\n    key: \"handleClick\",\n    value: function handleClick() {\n      console.log('starting simulation');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      // This syntax ensures `this` is bound within handleClick\n      return React.createElement(\"button\", {\n        onClick: function onClick(e) {\n          return _this.handleClick(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, \"\\u25A0 Stop\");\n    }\n  }]);\n\n  return StopButton;\n}(React.Component);\n\nvar PlayButton =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(PlayButton, _React$Component2);\n\n  function PlayButton() {\n    _classCallCheck(this, PlayButton);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PlayButton).apply(this, arguments));\n  }\n\n  _createClass(PlayButton, [{\n    key: \"handleClick\",\n    value: function handleClick() {\n      console.log('starting simulation');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // This syntax ensures `this` is bound within handleClick\n      return React.createElement(\"button\", {\n        onClick: function onClick(e) {\n          return _this2.handleClick(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"\\u25B6 Play\");\n    }\n  }]);\n\n  return PlayButton;\n}(React.Component);\n\nvar Board =\n/*#__PURE__*/\nfunction (_React$Component3) {\n  _inherits(Board, _React$Component3);\n\n  function Board(props) {\n    var _this3;\n\n    _classCallCheck(this, Board);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this3.state = {\n      squares: Array(400).fill('white'),\n      simulationRunning: false,\n      generation: 0\n    };\n    return _this3;\n  }\n\n  _createClass(Board, [{\n    key: \"buildNextGen\",\n    value: function buildNextGen() {\n      var newSquares = this.state.squares;\n\n      for (var i = 0; i < newSquares.length; i++) {\n        var liveNeighbors = 0;\n        var curStatus = this.state.squares[i]; // check 8 neighbors in squares, count black (alive)\n\n        if (curStatus === 'black') // is alive, will neighbors kill it?\n          {\n            if (liveNeighbors === 2 || liveNeighbors === 3) {\n              newSquares[i] = 'black'; // staying alive!\n            } else {\n              newSquares[i] = 'white'; // death by overcrowding or underpopulation\n            }\n          } else // is dead, is situation right for birth?\n          {\n            if (liveNeighbors === 3) {\n              newSquares[i] = 'black'; // yes\n            } else {\n              newSquares[i] = 'white'; // no\n            }\n          }\n      } // wait ??? seconds\n      // set Board's squares to newSquares\n\n\n      this.setState({\n        squares: newSquares,\n        generation: this.state.generation + 1\n      });\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(i) {\n      var squares = this.state.squares.slice();\n\n      if (this.state.simulationRunning) {\n        return;\n      }\n\n      if (squares[i] === 'white') {\n        squares[i] = 'black';\n      } else {\n        squares[i] = 'white';\n      }\n\n      this.setState({\n        squares: squares\n      });\n    }\n  }, {\n    key: \"renderSquare\",\n    value: function renderSquare(i) {\n      var _this4 = this;\n\n      return React.createElement(Square, {\n        bgColor: this.state.squares[i],\n        onClick: function onClick() {\n          return _this4.handleClick(i);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var status;\n\n      while (this.state.simulationRunning) {\n        this.buildNextGen();\n      }\n\n      status = 'Generation: ' + this.state.generation;\n      var lines = this.state.squares.map(function (line, i) {\n        // This is just an example - your return will pull information from `line`\n        // Make sure to always pass a `key` prop when working with dynamic children: https://facebook.github.io/react/docs/multiple-components.html#dynamic-children\n        return React.createElement(\"div\", {\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }, \"I am a line!\");\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, status), React.createElement(\"div\", {\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, lines));\n    }\n  }]);\n\n  return Board;\n}(React.Component);\n\nvar Simulation =\n/*#__PURE__*/\nfunction (_React$Component4) {\n  _inherits(Simulation, _React$Component4);\n\n  function Simulation() {\n    _classCallCheck(this, Simulation);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Simulation).apply(this, arguments));\n  }\n\n  _createClass(Simulation, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"sim\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"sim-board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(Board, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"sim-controls\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(PlayButton, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }), React.createElement(StopButton, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"sim-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }), React.createElement(\"ol\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Simulation;\n}(React.Component); // ========================================\n\n\nReactDOM.render(React.createElement(Simulation, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 174\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/elissathomas/Documents/GitHub/Conways-Life/fsw-sample-sln/src/index.js"],"names":["React","ReactDOM","Square","props","onClick","backgroundColor","bgColor","StopButton","console","log","e","handleClick","Component","PlayButton","Board","state","squares","Array","fill","simulationRunning","generation","newSquares","i","length","liveNeighbors","curStatus","setState","slice","status","buildNextGen","lines","map","line","Simulation","render","document","getElementById"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;;AAEE,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACrB,SACE;AAAQ,IAAA,SAAS,EAAC,QAAlB;AAA2B,IAAA,OAAO,EAAEA,KAAK,CAACC,OAA1C;AAAmD,IAAA,KAAK,EAAE;AAACC,MAAAA,eAAe,EAACF,KAAK,CAACG;AAAvB,KAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAMD,C,CAEH;AACA;AACA;AACA;AACA;AACA;AACA;;;IAEMC,U;;;;;;;;;;;;;kCACY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACD;;;6BAEQ;AAAA;;AACP;AACA,aACE;AAAQ,QAAA,OAAO,EAAE,iBAACC,CAAD;AAAA,iBAAO,KAAI,CAACC,WAAL,CAAiBD,CAAjB,CAAP;AAAA,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF;AAKD;;;;EAZoBV,KAAK,CAACY,S;;IAezBC,U;;;;;;;;;;;;;kCACY;AACZL,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACD;;;6BAEQ;AAAA;;AACP;AACA,aACE;AAAQ,QAAA,OAAO,EAAE,iBAACC,CAAD;AAAA,iBAAO,MAAI,CAACC,WAAL,CAAiBD,CAAjB,CAAP;AAAA,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF;AAKD;;;;EAZoBV,KAAK,CAACY,S;;IAevBE,K;;;;;AACJ,iBAAYX,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,gFAAMA,KAAN;AACA,WAAKY,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAEC,KAAK,CAAC,GAAD,CAAL,CAAWC,IAAX,CAAgB,OAAhB,CADE;AAEXC,MAAAA,iBAAiB,EAAE,KAFR;AAGXC,MAAAA,UAAU,EAAE;AAHD,KAAb;AAFiB;AAOlB;;;;mCAEc;AACX,UAAIC,UAAU,GAAG,KAAKN,KAAL,CAAWC,OAA5B;;AACA,WAAI,IAAIM,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACD,UAAU,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAwC;AACpC,YAAIE,aAAa,GAAG,CAApB;AACA,YAAIC,SAAS,GAAG,KAAKV,KAAL,CAAWC,OAAX,CAAmBM,CAAnB,CAAhB,CAFoC,CAIpC;;AAEA,YAAIG,SAAS,KAAK,OAAlB,EAA4B;AAC5B;AACI,gBAAID,aAAa,KAAK,CAAlB,IAAuBA,aAAa,KAAK,CAA7C,EACA;AACIH,cAAAA,UAAU,CAACC,CAAD,CAAV,GAAgB,OAAhB,CADJ,CAC6B;AAC5B,aAHD,MAKA;AACID,cAAAA,UAAU,CAACC,CAAD,CAAV,GAAgB,OAAhB,CADJ,CAC6B;AAC5B;AACJ,WAVD,MAWM;AACN;AACI,gBAAIE,aAAa,KAAK,CAAtB,EACA;AACIH,cAAAA,UAAU,CAACC,CAAD,CAAV,GAAgB,OAAhB,CADJ,CAC6B;AAC5B,aAHD,MAKA;AACID,cAAAA,UAAU,CAACC,CAAD,CAAV,GAAgB,OAAhB,CADJ,CAC6B;AAC5B;AACJ;AACJ,OA9BU,CA+BX;AAEA;;;AACA,WAAKI,QAAL,CAAc;AACVV,QAAAA,OAAO,EAAEK,UADC;AAEVD,QAAAA,UAAU,EAAE,KAAKL,KAAL,CAAWK,UAAX,GAAwB;AAF1B,OAAd;AAIH;;;gCAEWE,C,EAAG;AACb,UAAMN,OAAO,GAAG,KAAKD,KAAL,CAAWC,OAAX,CAAmBW,KAAnB,EAAhB;;AACA,UAAI,KAAKZ,KAAL,CAAWI,iBAAf,EAAkC;AAChC;AACD;;AACD,UAAIH,OAAO,CAACM,CAAD,CAAP,KAAe,OAAnB,EAA4B;AACxBN,QAAAA,OAAO,CAACM,CAAD,CAAP,GAAa,OAAb;AACH,OAFD,MAGK;AACDN,QAAAA,OAAO,CAACM,CAAD,CAAP,GAAa,OAAb;AACH;;AACD,WAAKI,QAAL,CAAc;AACZV,QAAAA,OAAO,EAAEA;AADG,OAAd;AAGD;;;iCAEYM,C,EAAG;AAAA;;AACd,aACE,oBAAC,MAAD;AACE,QAAA,OAAO,EAAE,KAAKP,KAAL,CAAWC,OAAX,CAAmBM,CAAnB,CADX;AAEE,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACX,WAAL,CAAiBW,CAAjB,CAAN;AAAA,SAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAMD;;;6BAEQ;AACP,UAAIM,MAAJ;;AACA,aAAO,KAAKb,KAAL,CAAWI,iBAAlB,EAAqC;AACnC,aAAKU,YAAL;AACD;;AACDD,MAAAA,MAAM,GAAG,iBAAiB,KAAKb,KAAL,CAAWK,UAArC;AACA,UAAIU,KAAK,GAAG,KAAKf,KAAL,CAAWC,OAAX,CAAmBe,GAAnB,CAAuB,UAASC,IAAT,EAAeV,CAAf,EAAkB;AACnD;AACA;AACA,eACE;AAAK,UAAA,GAAG,EAAEA,CAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF;AAGD,OANW,CAAZ;AAQA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAyBM,MAAzB,CADF,EAEE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACCE,KADD,CAFF,CADF;AAQD;;;;EAjGiB9B,KAAK,CAACY,S;;IAoGpBqB,U;;;;;;;;;;;;;6BACK;AACP,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,EAIE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EACgB,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADhB,CAJF,EAOE;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CAPF,CADF;AAcD;;;;EAhBsBjC,KAAK,CAACY,S,GAmB/B;;;AAEAX,QAAQ,CAACiC,MAAT,CACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAEEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFF","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n  function Square(props) {\n    return (\n      <button className=\"square\" onClick={props.onClick} style={{backgroundColor:props.bgColor}} >\n        \n        {/* {props.value} */}\n      </button>\n    );\n  }\n\n//   function Play(props) {\n//     return (\n//       <button className=\"play\" onClick={props.runSimulation}>\n//         {props.value}\n//       </button>\n//     );\n//   }\n\nclass StopButton extends React.Component {\n    handleClick() {\n      console.log('starting simulation');\n    }\n  \n    render() {\n      // This syntax ensures `this` is bound within handleClick\n      return (\n        <button onClick={(e) => this.handleClick(e)}>\n          ■ Stop\n        </button>\n      );\n    }\n  }\n\nclass PlayButton extends React.Component {\n    handleClick() {\n      console.log('starting simulation');\n    }\n  \n    render() {\n      // This syntax ensures `this` is bound within handleClick\n      return (\n        <button onClick={(e) => this.handleClick(e)}>\n          ▶ Play\n        </button>\n      );\n    }\n  }\n\n  class Board extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        squares: Array(400).fill('white'),\n        simulationRunning: false,\n        generation: 0,\n      };\n    }\n\n    buildNextGen() {\n        var newSquares = this.state.squares;\n        for(var i=0; i<newSquares.length; i++ ) {\n            var liveNeighbors = 0;\n            var curStatus = this.state.squares[i];\n\n            // check 8 neighbors in squares, count black (alive)\n\n            if( curStatus === 'black' ) // is alive, will neighbors kill it?\n            {\n                if( liveNeighbors === 2 || liveNeighbors === 3 )\n                {\n                    newSquares[i] = 'black'; // staying alive!\n                }\n                else\n                {\n                    newSquares[i] = 'white'; // death by overcrowding or underpopulation\n                }\n            }\n            else  // is dead, is situation right for birth?\n            {\n                if( liveNeighbors === 3 )\n                {\n                    newSquares[i] = 'black'; // yes\n                }\n                else\n                {\n                    newSquares[i] = 'white'; // no\n                }\n            }\n        }\n        // wait ??? seconds\n\n        // set Board's squares to newSquares\n        this.setState({\n            squares: newSquares,\n            generation: this.state.generation + 1,\n          });\n    }\n  \n    handleClick(i) {\n      const squares = this.state.squares.slice();\n      if (this.state.simulationRunning) {\n        return;\n      }\n      if( squares[i] === 'white') {\n          squares[i] = 'black';\n      }\n      else {\n          squares[i] = 'white';\n      }\n      this.setState({\n        squares: squares,\n      });\n    }\n  \n    renderSquare(i) {\n      return (\n        <Square\n          bgColor={this.state.squares[i]}\n          onClick={() => this.handleClick(i)}\n        />\n      );\n    }\n  \n    render() {\n      let status;\n      while (this.state.simulationRunning) {\n        this.buildNextGen();\n      } \n      status = 'Generation: ' + this.state.generation;\n      var lines = this.state.squares.map(function(line, i) {\n        // This is just an example - your return will pull information from `line`\n        // Make sure to always pass a `key` prop when working with dynamic children: https://facebook.github.io/react/docs/multiple-components.html#dynamic-children\n        return (\n          <div key={i}>I am a line!</div>\n        );\n      });\n    \n      return (\n        <div>\n          <div className=\"status\">{status}</div>\n          <div className=\"board-row\">\n          {lines}\n          </div>\n        </div>\n      );\n    }\n  }\n  \n  class Simulation extends React.Component {\n    render() {\n      return (\n        <div className=\"sim\">\n          <div className=\"sim-board\">\n            <Board />\n          </div>\n          <div className=\"sim-controls\" >\n            <PlayButton /><StopButton />\n          </div>\n          <div className=\"sim-info\">\n            <div>{/* status */}</div>\n            <ol>{/* TODO */}</ol>\n          </div>\n        </div>\n      );\n    }\n  }\n  \n  // ========================================\n  \n  ReactDOM.render(\n    <Simulation />,\n    document.getElementById('root')\n  );\n"]},"metadata":{},"sourceType":"module"}