{"map":"{\"version\":3,\"sources\":[\"/Users/elissathomas/Documents/GitHub/Game-of-Life/fsw-sample-sln/src/index.js\"],\"names\":[\"Square\",\"props\",\"react__WEBPACK_IMPORTED_MODULE_5___default\",\"a\",\"createElement\",\"className\",\"onClick\",\"style\",\"backgroundColor\",\"bgColor\",\"Board\",\"_this\",\"Object\",\"_Users_elissathomas_Documents_GitHub_Game_of_Life_fsw_sample_sln_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__\",\"this\",\"_Users_elissathomas_Documents_GitHub_Game_of_Life_fsw_sample_sln_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__\",\"_Users_elissathomas_Documents_GitHub_Game_of_Life_fsw_sample_sln_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__\",\"call\",\"playSim\",\"setState\",\"simulationRunning\",\"buildNextGen\",\"stopSim\",\"timeoutHandler\",\"window\",\"clearTimeout\",\"changeGridSize\",\"event\",\"size\",\"target\",\"value\",\"cells\",\"console\",\"log\",\"squares\",\"Array\",\"fill\",\"changeSimSpeed\",\"interval\",\"state\",\"generation\",\"_this2\",\"newSquares\",\"slice\",\"i\",\"length\",\"liveNeighbors\",\"curStatus\",\"setTimeout\",\"_this3\",\"handleClick\",\"num\",\"numRows\",\"_this4\",\"numbers\",\"aRow\",\"map\",\"n\",\"renderSquare\",\"_this5\",\"createRows\",\"status\",\"createGrid\",\"defaultValue\",\"onChange\",\"React\",\"Component\",\"Simulation\",\"ReactDOM\",\"render\",\"document\",\"getElementById\"],\"mappings\":\"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\",\"sourcesContent\":[\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\n\\n  function Square(props) {\\n    return (\\n      <button className=\\\"square\\\" onClick={props.onClick} style={{backgroundColor:props.bgColor}} >\\n        \\n        {/* {props.value} */}\\n        \\n      </button>\\n    );\\n  }\\n\\n  class Board extends React.Component {\\n\\n    constructor(props) {\\n      super(props);\\n      this.state = {\\n        size: 10,\\n        squares: Array(100).fill('white'),\\n        simulationRunning: false,\\n        generation: 0,\\n        interval: 1000,\\n      };\\n    }\\n\\n    buildNextGen() {\\n        var newSquares = this.state.squares.slice();\\n\\n        for(var i=0; i<newSquares.length; i++ ) {\\n            var liveNeighbors = 0;\\n            var curStatus = this.state.squares[i];\\n\\n            console.log( this.state.squares );\\n            // check 8 neighbors in squares, count black (alive)\\n            if( this.state.squares[i-this.state.size-1] === \\\"black\\\") { liveNeighbors++; } // top left\\n            if( this.state.squares[i-this.state.size] === \\\"black\\\") { liveNeighbors++; }   // top\\n            if( this.state.squares[i-this.state.size+1] === \\\"black\\\") { liveNeighbors++; } // top right\\n            if( this.state.squares[i-1] === \\\"black\\\") { liveNeighbors++; } // left\\n            if( this.state.squares[i+1] === \\\"black\\\") { liveNeighbors++; } // right\\n            if( this.state.squares[i+this.state.size-1] === \\\"black\\\") { liveNeighbors++; } // bottom left\\n            if( this.state.squares[i+this.state.size] === \\\"black\\\") { liveNeighbors++; } // bottom\\n            if( this.state.squares[i+this.state.size+1] === \\\"black\\\") { liveNeighbors++; } // bottom right\\n            \\n            if( curStatus === \\\"black\\\" ) // is alive, will neighbors kill it?\\n            {\\n                \\n                if( liveNeighbors === 2 || liveNeighbors === 3 )\\n                {\\n                    newSquares[i] = 'black'; // staying alive!\\n                }\\n                else\\n                {\\n                    newSquares[i] = 'white'; // death by overcrowding or underpopulation\\n                }\\n            }\\n            else  // is dead, is situation right for birth?\\n            {\\n                \\n                if( liveNeighbors === 3 )\\n                {\\n                    newSquares[i] = 'black'; // yes\\n                }\\n                else\\n                {\\n                    newSquares[i] = 'white'; // no\\n                }\\n            }\\n            \\n        }\\n        // set Board's squares to newSquares\\n        this.setState({\\n            squares: newSquares,\\n            generation: this.state.generation + 1,\\n          });\\n\\n        // wait [interval] seconds\\n        this.timeoutHandler = window.setTimeout(() => {\\n            this.buildNextGen();\\n          }, this.state.interval);\\n    }\\n  \\n    handleClick(i) {\\n      const squares = this.state.squares.slice();\\n      if (this.state.simulationRunning) {\\n        return;\\n      }\\n      if( squares[i] === 'white') {\\n          squares[i] = 'black';\\n      }\\n      else {\\n          squares[i] = 'white';\\n      }\\n      this.setState({\\n        squares: squares,\\n      });\\n    }\\n\\n    playSim = () => {\\n        this.setState({ simulationRunning: true });\\n        this.buildNextGen();\\n    }\\n\\n    stopSim = () => {\\n        this.setState({ simulationRunning: false });\\n        if (this.timeoutHandler) {\\n            window.clearTimeout(this.timeoutHandler);\\n            this.timeoutHandler = null;\\n          }\\n    }\\n\\n    changeGridSize = (event) => {\\n        this.setState({ size: event.target.value });\\n        const cells = event.target.value * event.target.value;\\n        console.log( cells );\\n        this.setState({ squares: Array(cells).fill('white')})\\n      }\\n      \\n    changeSimSpeed = (event) => {\\n        this.setState({ interval: event.target.value });\\n      }\\n  \\n    renderSquare(i) {\\n      return (\\n        <Square\\n          bgColor={this.state.squares[i]}\\n          onClick={() => this.handleClick(i)}\\n        />\\n       );\\n    }\\n  \\n    createRows( num, numRows ) {\\n        var numbers = [this.state.size];\\n        for(var i=0; i<this.state.size; i++) {\\n            numbers[i] = i;\\n        }\\n        const aRow = numbers.map((n) => this.renderSquare(n + num*numRows));//{this.renderSquare(n + numRows*num)} );\\n\\n        return (\\n            <div className=\\\"board-row\\\">\\n                {aRow}\\n            </div>\\n        );\\n    }\\n\\n    createGrid( num ){\\n        var numbers = [this.state.size];\\n        for(var i=0; i<this.state.size; i++) {\\n            numbers[i] = i;\\n        }\\n        const allRows = numbers.map((n) => this.createRows(n, num));//{this.createRows(n, this.state.size )} );\\n        return allRows;\\n    }\\n\\n    render() {\\n      let status;\\n      \\n      status = 'Generation: ' + this.state.generation;\\n       \\n      return (\\n          <div className=\\\"top\\\">\\n                <div className=\\\"status\\\">{status}</div>\\n                \\n                <div className=\\\"board\\\">\\n                    {this.createGrid( this.state.size )}\\n                </div>\\n                \\n                <div className=\\\"controls\\\">\\n                    Update every <input defaultValue={this.state.interval} size=\\\"8\\\"\\n                        onChange={this.changeSimSpeed} /> ms\\n                    <br />\\n\\n                    Size  of  grid   <input defaultValue={this.state.size} size=\\\"8\\\"\\n                        onChange={this.changeGridSize} /> \\n                    <br />\\n\\n                    {this.state.simulationRunning ?\\n                        <button className=\\\"button\\\"\\n                            onClick={this.stopSim}>■ Stop</button> :\\n                        <button className=\\\"button\\\"\\n                            onClick={this.playSim}>▶ Play</button>\\n                    }\\n                </div>\\n\\n            </div>\\n      );\\n    }\\n  }\\n  \\n  class Simulation extends React.Component {\\n    render() {\\n      return (\\n        <div className=\\\"sim\\\">\\n          <div className=\\\"sim-board\\\">\\n            <Board /> \\n          </div>\\n          <div className=\\\"sim-about\\\">\\n            <br /><br /><br />\\n                About this Algorithm...\\n            </div>\\n          <div className=\\\"sim-info\\\">\\n            <div>{/* status */}</div>\\n            <ol>{/* TODO */}</ol>\\n          </div>\\n        </div>\\n      );\\n    }\\n  }\\n  \\n  // ========================================\\n  \\n  ReactDOM.render(\\n    <Simulation />,\\n    document.getElementById('root')\\n  );\\n\\n  // 3d life...three.js for visualizing\\n  // hashlife\\n  // color fading based on time of death\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{14:function(e,t,a){},8:function(e,t,a){e.exports=a(9)},9:function(e,t,a){\"use strict\";a.r(t);var s=a(1),n=a(2),i=a(4),r=a(3),l=a(5),u=a(0),c=a.n(u),o=a(7),h=a.n(o);a(14);function m(e){return c.a.createElement(\"button\",{className:\"square\",onClick:e.onClick,style:{backgroundColor:e.bgColor}})}var b=function(e){function t(e){var a;return Object(s.a)(this,t),(a=Object(i.a)(this,Object(r.a)(t).call(this,e))).playSim=function(){a.setState({simulationRunning:!0}),a.buildNextGen()},a.stopSim=function(){a.setState({simulationRunning:!1}),a.timeoutHandler&&(window.clearTimeout(a.timeoutHandler),a.timeoutHandler=null)},a.changeGridSize=function(e){a.setState({size:e.target.value});var t=e.target.value*e.target.value;console.log(t),a.setState({squares:Array(t).fill(\"white\")})},a.changeSimSpeed=function(e){a.setState({interval:e.target.value})},a.state={size:10,squares:Array(100).fill(\"white\"),simulationRunning:!1,generation:0,interval:1e3},a}return Object(l.a)(t,e),Object(n.a)(t,[{key:\"buildNextGen\",value:function(){for(var e=this,t=this.state.squares.slice(),a=0;a<t.length;a++){var s=0,n=this.state.squares[a];console.log(this.state.squares),\"black\"===this.state.squares[a-this.state.size-1]&&s++,\"black\"===this.state.squares[a-this.state.size]&&s++,\"black\"===this.state.squares[a-this.state.size+1]&&s++,\"black\"===this.state.squares[a-1]&&s++,\"black\"===this.state.squares[a+1]&&s++,\"black\"===this.state.squares[a+this.state.size-1]&&s++,\"black\"===this.state.squares[a+this.state.size]&&s++,\"black\"===this.state.squares[a+this.state.size+1]&&s++,t[a]=\"black\"===n?2===s||3===s?\"black\":\"white\":3===s?\"black\":\"white\"}this.setState({squares:t,generation:this.state.generation+1}),this.timeoutHandler=window.setTimeout(function(){e.buildNextGen()},this.state.interval)}},{key:\"handleClick\",value:function(e){var t=this.state.squares.slice();this.state.simulationRunning||(\"white\"===t[e]?t[e]=\"black\":t[e]=\"white\",this.setState({squares:t}))}},{key:\"renderSquare\",value:function(e){var t=this;return c.a.createElement(m,{bgColor:this.state.squares[e],onClick:function(){return t.handleClick(e)}})}},{key:\"createRows\",value:function(e,t){for(var a=this,s=[this.state.size],n=0;n<this.state.size;n++)s[n]=n;var i=s.map(function(s){return a.renderSquare(s+e*t)});return c.a.createElement(\"div\",{className:\"board-row\"},i)}},{key:\"createGrid\",value:function(e){for(var t=this,a=[this.state.size],s=0;s<this.state.size;s++)a[s]=s;return a.map(function(a){return t.createRows(a,e)})}},{key:\"render\",value:function(){var e;return e=\"Generation: \"+this.state.generation,c.a.createElement(\"div\",{className:\"top\"},c.a.createElement(\"div\",{className:\"status\"},e),c.a.createElement(\"div\",{className:\"board\"},this.createGrid(this.state.size)),c.a.createElement(\"div\",{className:\"controls\"},\"Update every \",c.a.createElement(\"input\",{defaultValue:this.state.interval,size:\"8\",onChange:this.changeSimSpeed}),\" ms\",c.a.createElement(\"br\",null),\"Size  of  grid   \",c.a.createElement(\"input\",{defaultValue:this.state.size,size:\"8\",onChange:this.changeGridSize}),c.a.createElement(\"br\",null),this.state.simulationRunning?c.a.createElement(\"button\",{className:\"button\",onClick:this.stopSim},\"\\u25a0 Stop\"):c.a.createElement(\"button\",{className:\"button\",onClick:this.playSim},\"\\u25b6 Play\")))}}]),t}(c.a.Component),d=function(e){function t(){return Object(s.a)(this,t),Object(i.a)(this,Object(r.a)(t).apply(this,arguments))}return Object(l.a)(t,e),Object(n.a)(t,[{key:\"render\",value:function(){return c.a.createElement(\"div\",{className:\"sim\"},c.a.createElement(\"div\",{className:\"sim-board\"},c.a.createElement(b,null)),c.a.createElement(\"div\",{className:\"sim-about\"},c.a.createElement(\"br\",null),c.a.createElement(\"br\",null),c.a.createElement(\"br\",null),\"About this Algorithm...\"),c.a.createElement(\"div\",{className:\"sim-info\"},c.a.createElement(\"div\",null),c.a.createElement(\"ol\",null)))}}]),t}(c.a.Component);h.a.render(c.a.createElement(d,null),document.getElementById(\"root\"))}},[[8,2,1]]]);","extractedComments":[]}