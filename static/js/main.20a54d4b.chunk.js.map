{"version":3,"sources":["index.js"],"names":["Square","props","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","onClick","style","backgroundColor","bgColor","Rules","React","Component","Board","_this","Object","_Users_elissathomas_Documents_GitHub_Game_of_Life_fsw_sample_sln_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_elissathomas_Documents_GitHub_Game_of_Life_fsw_sample_sln_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_elissathomas_Documents_GitHub_Game_of_Life_fsw_sample_sln_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","playSim","setState","simulationRunning","buildNextGen","stopSim","timeoutHandler","window","clearTimeout","changeGridSize","event","size","target","value","cells","console","log","squares","Array","fill","changeSimSpeed","interval","state","generation","_this2","newSquares","slice","i","length","liveNeighbors","curStatus","setTimeout","_this3","handleClick","num","numRows","_this4","numbers","aRow","map","n","renderSquare","_this5","createRows","status","createGrid","defaultValue","onChange","Simulation","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.20a54d4b.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n  function Square(props) {\n    return (\n      <button className=\"square\" onClick={props.onClick} style={{backgroundColor:props.bgColor}} >        \n      </button>\n    );\n  }\n\n  class Rules extends React.Component {\n    render() {\n        return (\n            <div>\n            <br/><br/><br/><br/><br/>\n            <h3 className=\"rule-header\"> Rules </h3>\n            <ul className=\"rule-list\">\n                <li>\n                    If a cell is <b>alive</b> and it has exactly 2 or 3 live neighbors, it <b>stays alive</b>.\n                </li>\n                <li>\n                    If a cell is <b>alive</b> and it has less than 2 or 4+ live neighbors, it <b>dies</b>.\n                </li>\n                <li>\n                    If a cell is <b>dead</b> and it has exactly 3 live neighbors, it <b>comes to life</b>.\n                </li>\n            </ul>\n            </div>\n        );\n    }\n  }\n\n  class Board extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        size: 10,\n        squares: Array(100).fill('white'),\n        simulationRunning: false,\n        generation: 0,\n        interval: 1000,\n      };\n    }\n\n    buildNextGen() {\n        var newSquares = this.state.squares.slice();\n\n        for(var i=0; i<newSquares.length; i++ ) {\n            var liveNeighbors = 0;\n            var curStatus = this.state.squares[i];\n\n            console.log( this.state.squares );\n            // check 8 neighbors in squares, count black (alive)\n            if( this.state.squares[i-this.state.size-1] === \"black\") { liveNeighbors++; } // top left\n            if( this.state.squares[i-this.state.size] === \"black\") { liveNeighbors++; }   // top\n            if( this.state.squares[i-this.state.size+1] === \"black\") { liveNeighbors++; } // top right\n            if( this.state.squares[i-1] === \"black\") { liveNeighbors++; } // left\n            if( this.state.squares[i+1] === \"black\") { liveNeighbors++; } // right\n            if( this.state.squares[i+this.state.size-1] === \"black\") { liveNeighbors++; } // bottom left\n            if( this.state.squares[i+this.state.size] === \"black\") { liveNeighbors++; } // bottom\n            if( this.state.squares[i+this.state.size+1] === \"black\") { liveNeighbors++; } // bottom right\n            \n            if( curStatus === \"black\" ) // is alive, will neighbors kill it?\n            {\n                \n                if( liveNeighbors === 2 || liveNeighbors === 3 )\n                {\n                    newSquares[i] = 'black'; // staying alive!\n                }\n                else\n                {\n                    newSquares[i] = 'white'; // death by overcrowding or underpopulation\n                }\n            }\n            else  // is dead, is situation right for birth?\n            {\n                \n                if( liveNeighbors === 3 )\n                {\n                    newSquares[i] = 'black'; // yes\n                }\n                else\n                {\n                    newSquares[i] = 'white'; // no\n                }\n            }\n            \n        }\n        // set Board's squares to newSquares\n        this.setState({\n            squares: newSquares,\n            generation: this.state.generation + 1,\n          });\n\n        // wait [interval] seconds\n        this.timeoutHandler = window.setTimeout(() => {\n            this.buildNextGen();\n          }, this.state.interval);\n    }\n  \n    handleClick(i) {\n      const squares = this.state.squares.slice();\n      if (this.state.simulationRunning) {\n        return;\n      }\n      if( squares[i] === 'white') {\n          squares[i] = 'black';\n      }\n      else {\n          squares[i] = 'white';\n      }\n      this.setState({\n        squares: squares,\n      });\n    }\n\n    playSim = () => {\n        this.setState({ simulationRunning: true });\n        this.buildNextGen();\n    }\n\n    stopSim = () => {\n        this.setState({ simulationRunning: false });\n        if (this.timeoutHandler) {\n            window.clearTimeout(this.timeoutHandler);\n            this.timeoutHandler = null;\n          }\n    }\n\n    changeGridSize = (event) => {\n        this.setState({ size: event.target.value });\n        const cells = event.target.value * event.target.value;\n        console.log( cells );\n        this.setState({ squares: Array(cells).fill('white')})\n      }\n      \n    changeSimSpeed = (event) => {\n        this.setState({ interval: event.target.value });\n      }\n  \n    renderSquare(i) {\n      return (\n        <Square\n          bgColor={this.state.squares[i]}\n          onClick={() => this.handleClick(i)}\n        />\n       );\n    }\n  \n    createRows( num, numRows ) {\n        var numbers = [this.state.size];\n        for(var i=0; i<this.state.size; i++) {\n            numbers[i] = i;\n        }\n        const aRow = numbers.map((n) => this.renderSquare(n + num*numRows));//{this.renderSquare(n + numRows*num)} );\n\n        return (\n            <div className=\"board-row\">\n                {aRow}\n            </div>\n        );\n    }\n\n    createGrid( num ){\n        var numbers = [this.state.size];\n        for(var i=0; i<this.state.size; i++) {\n            numbers[i] = i;\n        }\n        const allRows = numbers.map((n) => this.createRows(n, num));//{this.createRows(n, this.state.size )} );\n        return allRows;\n    }\n\n    render() {\n      let status;\n      \n      status = 'Generation: ' + this.state.generation;\n       \n      return (\n          <div className=\"top\">\n            <h2> Conway's Game of life</h2>\n                <div className=\"status\">{status}</div>\n                \n                <div className=\"board\">\n                    {this.createGrid( this.state.size )}\n                </div>\n                \n                <div className=\"controls\">\n                    Update every <input defaultValue={this.state.interval} size=\"8\"\n                        onChange={this.changeSimSpeed} /> ms\n                    <br />\n\n                    Size  of  grid   <input defaultValue={this.state.size} size=\"8\"\n                        onChange={this.changeGridSize} /> \n                    <br />\n\n                    {this.state.simulationRunning ?\n                        <button className=\"button\"\n                            onClick={this.stopSim}>■ Stop</button> :\n                        <button className=\"button\"\n                            onClick={this.playSim}>▶ Play</button>\n                    }\n                </div>\n\n            </div>\n      );\n    }\n  }\n  \n  class Simulation extends React.Component {\n    render() {\n      return (\n        <div className=\"sim\">\n          <div className=\"sim-main\">\n            <Board /> <Rules />\n            \n          </div>\n          <div className=\"sim-about\">\n            <br /><br /><br />\n                <h3>About this Algorithm...</h3>\n            </div>\n          <div className=\"sim-info\">\n            <div>{/* status */}</div>\n            <ol>{/* TODO */}</ol>\n          </div>\n        </div>\n      );\n    }\n  }\n  \n  // ========================================\n  \n  ReactDOM.render(\n    <Simulation />,\n    document.getElementById('root')\n  );\n\n  // 3d life...three.js for visualizing\n  // hashlife\n  // color fading based on time of death\n"],"sourceRoot":""}